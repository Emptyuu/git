git add <fileName> 添加文件("." 为提交所有)
git commit -m "注释"  提交到码仓
git diff 查看修改
git push 上传到github
git status 查看当前状态
git log 查看日志
git log --pretty=oneline 查看精简版的日志
git reset --hard HEAD^ 回退到上一个版本（HEAD~n）
git reset --hard <commit_id> 版本穿梭
git reflog 查看历史所有操作的版本号
git diff HEAD -- <fileName>	查看工作区和版本库里面最新版本的区别
git checkout -- <fileName>		文件撤销恢复到上次暂存区
git reset HEAD <fileName>		撤销暂存区的修改
git rm <fileName> 删除文件
git checkout -b <branchName>		创建分支并切换过去
git branch		查看当前分支
git checkout <branchName>	切换对应分支
git merge <branchName>	合并分支
git branch -d <branchName> 删除分支
git switch -c <branchName>	创建分支并切换过去
git switch <branchName>	切换对应分支
git log --graph		查看合并的分支图
git stash		创建临时工作区
git stash list 	查看临时工作区
git stash apply 	恢复但不删除临时工作区
git stash drop	删除临时工作区
git stash pop	回复并且删除临时工作区
git cherry-pick <id_commit> 复制特定提交到当前分支
git branch -D <branchName>	删除未合并分支	
git pull  拉取最新的提交
git branch --set-upstream-to=origin/dev dev 	本地dev与远程dev连结
git rebase		分支整理（貌似没啥用？？？？）
git log	查看所有标签
git log <tagcontent>	打上标签
git show <tagcontent>	查看指定标签
git tag <tagcontent> <id_commit>		给指定提交打上版本(-a指定标签名,-m指定说明文字)
git tag -d <tagcontent>删除指定标签
git push origin <tagcontent>	推送标签
git push origin --tags	推送所有标签
git push origin :refs/tags/v0.9		删除远程标签







=========================分支操作汇总==========================

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>或者git switch <name>

创建+切换分支：git checkout -b <name>或者git switch -c <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>


========================多人协作的工作模式=======================

首先，可以试图用git push origin <branch-name>推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。

===========================冲突处理============================
查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

==========================标签=================================
命令git push origin <tagname>可以推送一个本地标签；

命令git push origin --tags可以推送全部未推送过的本地标签；

命令git tag -d <tagname>可以删除一个本地标签；

命令git push origin :refs/tags/<tagname>可以删除一个远程标签。